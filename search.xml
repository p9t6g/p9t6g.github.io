<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[to-do list]]></title>
    <url>%2F2019%2F04%2F28%2Fto-do-list%2F</url>
    <content type="text"><![CDATA[矩乘(DP) 长剖LCTdsu on tree dancing links(矩阵链表) X(精准覆盖) 动态点分治 李超线段树 splay fhq 笛卡尔树 替罪羊树 重构树(kruskal)省选游记树网的核 圆方树 基环树]]></content>
      <tags>
        <tag>list</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[基环树]]></title>
    <url>%2F2019%2F04%2F28%2F%E5%9F%BA%E7%8E%AF%E6%A0%91%2F</url>
    <content type="text"></content>
      <categories>
        <category>学习笔记</category>
        <category>图论</category>
        <category>基环树</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>图论</tag>
        <tag>基环树</tag>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[李超线段树]]></title>
    <url>%2F2019%2F04%2F28%2F%E6%9D%8E%E8%B6%85%E7%BA%BF%E6%AE%B5%E6%A0%91%2F</url>
    <content type="text"></content>
      <categories>
        <category>学习笔记</category>
        <category>数据结构</category>
        <category>线段树</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>学习笔记</tag>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[炫酷反演膜术]]></title>
    <url>%2F2019%2F04%2F28%2F%E7%82%AB%E9%85%B7%E5%8F%8D%E6%BC%94%E8%86%9C%E6%9C%AF%2F</url>
    <content type="text"><![CDATA[玄学继续]]></content>
      <categories>
        <category>学习笔记</category>
        <category>数学</category>
        <category>反演</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>数学</tag>
        <tag>反演</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[树网的核]]></title>
    <url>%2F2019%2F04%2F28%2F%E6%A0%91%E7%BD%91%E7%9A%84%E6%A0%B8%2F</url>
    <content type="text"><![CDATA[偏门的知识点,但是很好玩啊 前置知识树的直径定义:树上最长的链 适用范围:显然:树 求解方式: 从任意一个点DFS并且存下到每个点到这个点的距离 然后从距离最远的那个点又DFS一遍,这次找到的最大的距离就是直径 :但是,还有一个问题:怎么存下来直径上的每一个点(任意一条) 其实也很简单,在第二遍的DFS时保存每个点的Father 然后从最后找到的那个远点一直找Father并且把每个点统计起来就是了 算法主体问题描述给定一颗树(无根) 求一条路径,使得其他点到这条路径的最大距离最小$(n&lt;=300000)$,并且使得这条路径的长度$\le s$ 算法分析暴力呵呵 分析一波显然,这条路径肯定在直径上(感性证明) 然后呢? 直径上每一个点记能延伸出去的最长距离为$f[x]$ 那么显然,对于选定路径x到y: 我们定义:$u\in(x,y)$,$s$为直径起点,$t$为直径终点 ans=max(max(f[u]),len(s,x),len(y,t))于是我们就得到了$n^2$的算法 然而:$n&lt;=300000$ 所以我们需要一个$O(n)$的算法 最终算法其实很简单,我们有两个优化: 优化1：我们不需要与每一个$f[u]$比较,而是直接与所有$f[u]$的最大值$fmax$比较 然而正确性？ 设 $fmax$是由点$p$延伸出来的 $s,t$分别是直径的起点与终点 那么我们可以分为两种情况: 况1:$p\in(x,y)$ 这很显然正确,因为它和之前没有任何区别 况2:$p\notin(x,y)$ 这个时候明显$len(s,x)\ge fmax$或$len(y,t)\ge fmax$ 为什么? 我们采用反证 假设$len(s,x)\le fmax$或$len(y,t)\le fmax$ 那么明显直径应该以延伸到$fmax$那一条链上,假设不成立 综上:我们可以直接和$fmax$比较,而不是每次都和$n$个比较 得证:)优化2:明显当一条链延长的时候它的解只可能变得更优 证明就免了吧 经过$sun123zxy$的反复询问我还是把证明写出来吧: 况1:当前的最大值是从$x$或$y$并且在直径上扩展出去的 那么当我们扩展的时候$len(s,x)$与$len(y,t)$中的一项必然变小(否则你就没有扩展啊) 况2:当前的最大值是$fmax$而反观我们的式子$max(fmax,len(s,x),len(x,t))$ 当我们扩展的时候$len(s,x)$与$len(y,t)$中的两项不会由任何一项变大,所以最大值仍为$fmax$ 综上:当我们扩展这条链时,答案显然不会变得更劣 得证:)于是我们就可以直接用两个指针在$O(n)$的时间复杂度内实现路径的枚举 代码代码框架: 前向星 DFS求直径 通过爬father的过程来找直径上的具体点 然后同时使用两个指针维护枚举路径 具体实现:1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980#include&lt;iostream&gt;#include&lt;iomanip&gt;#include&lt;cstring&gt;#include&lt;cstdio&gt;#include&lt;cstdlib&gt;#include&lt;cmath&gt;#include&lt;algorithm&gt;#include&lt;vector&gt;#define ll long long#define bl bool#define mem(a) memset(a,0,sizeof(a))#define maxn 500005#define maxm 2000005#define inf 0x7fffffffusing namespace std;ll Min(ll x,ll y)&#123;if(x&lt;y)return x;return y;&#125;ll Max(ll x,ll y)&#123;if(x&gt;y)return x;return y;&#125;ll read()&#123; ll s=0,h=1; char c=getchar(); while(c&lt;'0'||c&gt;'9')&#123;if(c=='-')h=-1;c=getchar();&#125; while(c&gt;='0'&amp;&amp;c&lt;='9')&#123;s=s*10+c-'0';c=getchar();&#125; return s*h;&#125;ll n,s,cnt,h[maxn],ff,tt,le,rt,dis,f[maxn],now,Fmax,bian[maxn];vector&lt;ll&gt;r;bl flg[maxn];struct Edge&#123;ll f,t,l,next;&#125;e[maxm];void add(ll f,ll t,ll l)&#123;e[++cnt]=&#123;f,t,l,h[f]&#125;;h[f]=cnt;&#125;void madd(ll f,ll t,ll l)&#123;add(f,t,l);add(t,f,l);&#125;void Getr(ll u,ll fa,ll d)&#123; f[u]=fa;ll v; if(d&gt;dis)&#123;dis=d;rt=u;&#125; for(int i=h[u];i;i=e[i].next)&#123; v=e[i].t;if(v==fa)continue; Getr(v,u,d+e[i].l); &#125;&#125;void GetR(ll u)&#123; while(f[u])&#123;r.push_back(u);u=f[u];flg[u]=1;&#125; r.push_back(u);flg[u]=1;&#125;void Dfs(ll u,ll fa,ll l)&#123; ll v;Fmax=Max(Fmax,l); for(int i=h[u];i;i=e[i].next)&#123; v=e[i].t;if(v==fa)continue; if(flg[v])Dfs(v,u,0),bian[u]=e[i].l; else Dfs(v,u,l+e[i].l); &#125;&#125;int main()&#123; n=read();s=read(); for(int i=1;i&lt;n;i++)&#123; ff=read();tt=read();le=read(); madd(ff,tt,le); &#125; dis=0;rt=0; Getr(1,0,0); dis=0;mem(bian); Getr(rt,0,0); GetR(rt); Dfs(rt,0,0); ll p1=0,p2=0,len=0,L=0,ltot=0,ans=inf; for(int i=0;i&lt;r.size();i++)ltot+=bian[r[i]]; while(p2&lt;=r.size())&#123; while(1)&#123; if(len+bian[r[p2]]&lt;=s&amp;&amp;p2&lt;r.size()-1)&#123; len+=bian[r[p2]]; p2++; &#125; else break; &#125; ans=Min(ans,Max(L,ltot-len-L)); len-=bian[r[p1]]; L+=bian[r[p1]]; p1++;p2=Max(p1,p2); &#125; ans=Max(ans,Fmax); cout&lt;&lt;ans&lt;&lt;endl; return 0;&#125; 温馨提示:fmax为一个库函数名 例题:(luogu)P1099-树网的核 (luogu)P2491-[SDOI2011]消防 就是一道题,也只有一道模板题 个人认为这个知识点很难考 因为这个知识点一旦需要套,那么就明显需要知道具体哪条路径 然而这样你就没法优化了啊(实际上优化2能用) 完:)]]></content>
      <categories>
        <category>学习笔记</category>
        <category>图论</category>
        <category>树的直径</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>图论</tag>
        <tag>树的直径</tag>
        <tag>小知识</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[TEST]]></title>
    <url>%2F2019%2F04%2F28%2FTEST%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[圆方树]]></title>
    <url>%2F2019%2F04%2F16%2F%E5%9C%86%E6%96%B9%E6%A0%91%2F</url>
    <content type="text"><![CDATA[emm，由方点和圆点组成的树。(命名鬼才) 前置芝士仙人掌图 仙人掌图是一个无向连通图 仙人掌图上的任意边都至多存在于一个环里 为什么叫仙人掌图你自己画出来就知道了 基环树emm,只有一个环的仙人掌,想看也可以去看看 进入正题什么是圆♂方树? 圆方树就是一个用树来表达仙人掌的一种方式(方表示环,圆表示点) 对于一个环,我们定义一个根,作为从原图根(已指定)节点DFS下来遇到的第一个这个环上的节点 那么这个节点就是这个环在圆方树上的爸爸,而这个环上的其他节点则是这个环在树上的儿子 emm,就这样 怎么建圆♂方树?well,观察一下: —一个环就是一个联通分量 —一个联通分量里有且只有一个环 —每一个联通分量都是一个点双联通分量 很美妙的性质,似乎每一条性质都将我们引向一个毒瘤老爷子 但是这明显不是一个简单的tarjan(tbyangz:哪里不简单了) —首我们仍按照正常tarjan跑,当我们找到了一个联通分量的时候,这就是个环了 —这个时候我们正处在的点,就是该环的环根了 (想想为什么) —新建一个方点并把当前找到的联通分量中的所有点都与之连边(保留原编号) —另外,如果搜到自己儿子与自己不在同一个联通分量中,就从自己向儿子连边(作圆方树边) 就酱 123456789101112131415161718192021222324252627282930313233343536ll n,m,q,ff,tt,le,N,dfn[maxn],low[maxn],tot,h[maxn],cnt=1,H[maxn],Cnt;struct Edge&#123;ll from,to,next,len;&#125;e[maxm],E[maxm];void add(ll f,ll t,ll l)&#123;e[++cnt]=&#123;f,t,h[f],l&#125;;h[f]=cnt;&#125;void madd(ll f,ll t,ll l)&#123;add(f,t,l);add(t,f,l);&#125;void Add(ll f,ll t,ll l)&#123;E[++Cnt]=&#123;f,t,H[f],l&#125;;H[f]=Cnt;&#125;void Madd(ll f,ll t,ll l)&#123;Add(f,t,l);Add(t,f,l);&#125;stack&lt;ll&gt;st;ll V[maxn],Vtop,now_edge,len1[maxn],len2[maxn];void Tarjan(ll u,ll pre_edge)&#123; dfn[u]=low[u]=++tot;ll v; for(int i=h[u];i;i=e[i].next)&#123; v=e[i].to; if(i==(pre_edge^1))continue; if(!dfn[v])&#123; st.push(i); Tarjan(v,i); low[u]=Min(low[u],low[v]); if(low[v]&gt;dfn[u])st.pop(),Madd(u,v,e[i].len); if(low[v]==dfn[u])&#123; ll W=0;Vtop=0; while(1)&#123; now_edge=st.top();st.pop(); W+=e[now_edge].len; V[++Vtop]=e[now_edge].from; len1[e[now_edge].from]=W; if(e[now_edge].from==u&amp;&amp;e[now_edge].to==v)break; &#125; N++; for(int i=1;i&lt;=Vtop;i++)&#123; len2[V[i]]=W-len1[V[i]]; Madd(N,V[i],min(len1[V[i]],len2[V[i]])); &#125; &#125; &#125; else if(dfn[v]&lt;dfn[u])&#123;st.push(i);low[u]=Min(low[u],dfn[v]);&#125; &#125;&#125; 其实确实挺简单的对吧 如何使用圆♂方树?掌上最短(长)路例题:luogu P5236-静态仙人掌题目描述:给你一个有nn个点和mm条边的仙人掌图，和qq组询问每次询问两个点u,vu,v，求两点之间的最短路。 输入:第一行三个正整数$n,m,q$意义如题目描述。接下来$m$行，每行三个正整数$u,v,w$表示$u,v$之间有一条权值为$w$的无向边。然后$q$行，每行两个正整数$u,v$询问$u$到$v​$的最短路。 输出:$q​$行，每行一个正整数，对应一次询问的结果。 数据范围$1≤n,q≤10000$$1≤m≤20000$$1≤w≤10^9​$ 思路分析:暴力?呵呵。 SPFA&amp;Dijkstra?$O(nm)$的时间,你要是i9-9900k的话你跑得过去我没话说,可惜你不是. 还能怎么做?冷静分析一波,这道题基本上时间要求$O(n log(m))$之类的神奇东西 然鹅,最短路能到$O(nlog(m))$的也就只有LCA了 不可做不可做 等等仙人掌? LCA? 圆方树啊!!! :) 圆方树上LCA其实说出来就没什么好讲的了 实际上有: —DFS确定每个点的爸爸 —预处理计算出ST数组 —回答询问 还有一个神奇的坑点(实际不坑): 当两个点的LCA是方点时,你需要特判最后两个点的距离 For example: 也就是两个换上的点之间的路径从上走还是从下走 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118#include&lt;iostream&gt;#include&lt;iomanip&gt;#include&lt;cstring&gt;#include&lt;cstdio&gt;#include&lt;cstdlib&gt;#include&lt;cmath&gt;#include&lt;algorithm&gt;#include&lt;queue&gt;#include&lt;stack&gt;#include&lt;bitset&gt;#include&lt;vector&gt;#include&lt;set&gt;#include&lt;map&gt;#define ll long long#define si short int#define bl bool#define maxn 30000#define maxm 50000#define inf 0x7fffffffusing namespace std;ll Min(ll x,ll y)&#123;if(x&lt;y)return x;return y;&#125;ll Max(ll x,ll y)&#123;if(x&gt;y)return x;return y;&#125;ll read()&#123; ll s=0,h=1; char c=getchar(); while(c&lt;'0'||c&gt;'9')&#123;if(c=='-')h=-1;c=getchar();&#125; while(c&gt;='0'&amp;&amp;c&lt;='9')&#123;s=s*10+c-'0';c=getchar();&#125; return s*h;&#125;void write(ll x)&#123; if(x&gt;9)&#123; si tmp=x%10; write(x/10); putchar(tmp+'0'); &#125; else putchar(x+'0');&#125;ll Pow(ll x,ll y,ll p)&#123; ll ans=1; while(y)&#123; if(y&amp;1)ans=ans*x%p; x=x*x%p;y&gt;&gt;=1; &#125; return ans;&#125;ll n,m,q,ff,tt,le,N,dfn[maxn],low[maxn],tot,h[maxn],cnt=1,H[maxn],Cnt;struct Edge&#123;ll from,to,next,len;&#125;e[maxm],E[maxm];void add(ll f,ll t,ll l)&#123;e[++cnt]=&#123;f,t,h[f],l&#125;;h[f]=cnt;&#125;void madd(ll f,ll t,ll l)&#123;add(f,t,l);add(t,f,l);&#125;void Add(ll f,ll t,ll l)&#123;E[++Cnt]=&#123;f,t,H[f],l&#125;;H[f]=Cnt;&#125;void Madd(ll f,ll t,ll l)&#123;Add(f,t,l);Add(t,f,l);&#125;stack&lt;ll&gt;st;ll V[maxn],Vtop,now_edge,len1[maxn],len2[maxn];void Tarjan(ll u,ll pre_edge)&#123; dfn[u]=low[u]=++tot;ll v; for(int i=h[u];i;i=e[i].next)&#123; v=e[i].to; if(i==(pre_edge^1))continue; if(!dfn[v])&#123; st.push(i); Tarjan(v,i); low[u]=Min(low[u],low[v]); if(low[v]&gt;dfn[u])st.pop(),Madd(u,v,e[i].len); if(low[v]==dfn[u])&#123; ll W=0;Vtop=0; while(1)&#123; now_edge=st.top();st.pop(); W+=e[now_edge].len; V[++Vtop]=e[now_edge].from; len1[e[now_edge].from]=W; if(e[now_edge].from==u&amp;&amp;e[now_edge].to==v)break; &#125; N++; for(int i=1;i&lt;=Vtop;i++)&#123; len2[V[i]]=W-len1[V[i]]; Madd(N,V[i],min(len1[V[i]],len2[V[i]])); &#125; &#125; &#125; else if(dfn[v]&lt;dfn[u])&#123;st.push(i);low[u]=Min(low[u],dfn[v]);&#125; &#125;&#125;ll ST[maxn][21],dep[maxn],dis[maxn][21];void Dfs(ll u,ll fa)&#123; ll v;ST[u][0]=fa;dep[u]=dep[fa]+1; for(int i=1;(1&lt;&lt;i)&lt;=dep[u];i++)&#123; ST[u][i]=ST[ST[u][i-1]][i-1]; dis[u][i]=dis[u][i-1]+dis[ST[u][i-1]][i-1]; &#125; for(int i=H[u];i;i=E[i].next)&#123; v=E[i].to;if(v==fa)continue; dis[v][0]=E[i].len;Dfs(v,u); &#125;&#125;ll que(ll x,ll y)&#123; ll ans=0,xx=x,yy=y; if(dep[x]&lt;dep[y])swap(x,y); for(int i=17;i&gt;=0;i--) if(dep[ST[x][i]]&gt;=dep[y]) ans+=dis[x][i],x=ST[x][i]; if(x==y)return ans; for(int i=17;i&gt;=0;i--) if(ST[x][i]!=ST[y][i])&#123; ans+=dis[x][i]+dis[y][i]; x=ST[x][i];y=ST[y][i]; &#125; if(ST[x][0]&gt;n)return ans+Min(Min(len1[x]+len2[y],len1[y]+len2[x]),abs(len1[x]-len1[y])); ans+=dis[x][0]+dis[y][0]; x=ST[x][0];y=ST[y][0]; return ans;&#125;int main()&#123; N=n=read();m=read();q=read(); for(int i=1;i&lt;=m;i++)&#123;ff=read();tt=read();le=read();madd(ff,tt,le);&#125; Tarjan(1,0); Dfs(1,0); for(int i=1;i&lt;=q;i++)write(que(read(),read())),puts(""); return 0;&#125; 码风略丑,别介意 掌上DP例题:luogu P4410-无归岛题目描述:Neverland是个神奇的地方，它由一些岛屿环形排列组成，每个岛上都生活着之中与众不同的物种。 但是这些物种都有一个共同的生活习性：对于同一个岛上的任意两个生物，他们有且仅有一个公共朋友，即对同一岛上的任意两个生物a和b有且仅有一个生物c既是a的朋友也是b的朋友，当然某些岛上也可能会只有一个生物孤单地生活着。 这一习性有一个明显的好处，当两个生物发生矛盾的时候，他们可以请那个唯一的公共朋友来裁决谁对谁错。 另外，岛与岛之间也有交流，具体来说，每个岛都会挑选出一个最聪明的生物做代表，然后这个生物与他相邻的两个岛的代表成为朋友。 不幸运的是，A世界准备入侵Neverland，作为Neverland的守护者，Lostmonkey想知道在一种比较坏的情况下Never的战斗力。因为和朋友并肩作战，能力会得到提升，所以Lostmonkey想知道在不选出一对朋友的情况下Neverland的最大战斗力。即选出一些生物，且没有一对生物是朋友，并且要求它们的战斗力之和最大。 输入:第一行包含用空格隔开的两个整数n和m，分别表示Neverland的生物种数和朋友对数。 接下来的m行描述所有朋友对，具体来说，每行包含用空格隔开的两个整数a和b，表示生物a和生物b是朋友（每对朋友只出现一次）。第m+2行包含用空格隔开的n个整数，其中第i个整数表示生物i的战斗力A. 输出:仅包含一个整数，表示满足条件的最大战斗力. 数据范围:输入数据保证$4≤n≤100000,1≤a,b≤n,1≤m≤200000,−1000≤Ai≤1000。$ 思路分析:算法分析:实际上呢,这个就是一个带权最大独立集 SO-&gt;DP!! 问题来了,这DP个鬼啊,不是树啊啊啊 冷静,冷静 我们需要一棵树,但是仙人掌可以用圆方树转为树 欢乐地DP!!! [pic 欢乐] 首先是状态:我们肯定需要一维点对吧,但是一维明显很难维护所以我们就需要第二维-&gt;当前点取与不取 $ f[x][0/1]: $点x的子树中取$(1)$或不取$(0)​$x时最大独立集的权值 然后是状态转移方程那么对于原点: f[x][1]=\sum_{y\in son[x]}f[y][0]\\ f[x][0]=\sum_{y\in son[x]}max(f[y][0],f[y][1])而对于方点,我们还需要一个环上辅助DP: 这里我们分取环根与不取环根两种情况讨论,但他们的状态转移方程是一样的 g[i][1]=f[v][1]+g[i-1][0]\\ g[i][0]=f[v][0]+max(g[i-1][0],g[i-1][1])这里将所有的环上节点存入了代表这个环的$vector$ 所以这里的$i$是在枚举$vector$中元素时用的指针 而$v$则是$vector$中第$i$个元素代表的点的编号 So, that’s it! 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143#include&lt;iostream&gt;#include&lt;iomanip&gt;#include&lt;cstring&gt;#include&lt;cstdio&gt;#include&lt;cstdlib&gt;#include&lt;cmath&gt;#include&lt;algorithm&gt;#include&lt;queue&gt;#include&lt;stack&gt;#include&lt;bitset&gt;#include&lt;vector&gt;#include&lt;set&gt;#include&lt;map&gt;#define ll long long#define ull unsigned long long#define db double#define ldb long db#define si short int#define bl bool#define mem(a) memset(a,0,sizeof(a))#define mee(a,b) memset(a,b,sizeof(a))#define setnum(a,b,c) for(int kkk=1;i&lt;=b;i++)a[kkk]=c[kkk];#define setnums(a,b,c) for(int kkk=1;kkk&lt;=b;kkk++)a[kkk]=c;#define maxn 200005#define maxm 500005#define inf 0x7fffffff#define r(a) a=read()#define w(a) write(a);puts("")#define W(a) write(a);printf(" ")#define For(a,b,c) for(int a=b;a&lt;=c;a++)using namespace std;ll Min(ll x,ll y)&#123;if(x&lt;y)return x;return y;&#125;ll Max(ll x,ll y)&#123;if(x&gt;y)return x;return y;&#125;ll read()&#123; ll s=0,h=1; char c=getchar(); while(c&lt;'0'||c&gt;'9')&#123;if(c=='-')h=-1;c=getchar();&#125; while(c&gt;='0'&amp;&amp;c&lt;='9')&#123;s=s*10+c-'0';c=getchar();&#125; return s*h;&#125;void write(ll x)&#123; if(x&gt;9)&#123; si tmp=x%10; write(x/10); putchar(tmp+'0'); &#125; else putchar(x+'0');&#125;ll Pow(ll x,ll y,ll p)&#123; ll ans=1; while(y)&#123; if(y&amp;1)ans=ans*x%p; x=x*x%p;y&gt;&gt;=1; &#125; return ans;&#125;ll n,m,f[maxn][2],g[maxn][2],ff,tt,le;namespace cst&#123; ll N,h[maxn],cnt=1,dfn[maxn],low[maxn],H[maxn],Cnt,tot,rf[maxn]; vector&lt;ll&gt;ring[maxn]; struct Edge&#123;ll from,to,next,len;&#125;e[maxm],E[maxm]; void add(ll f,ll t,ll l)&#123;e[++cnt]=&#123;f,t,h[f],l&#125;;h[f]=cnt;&#125; void madd(ll f,ll t,ll l)&#123;add(f,t,l);add(t,f,l);&#125; void Add(ll f,ll t,ll l)&#123;E[++Cnt]=&#123;f,t,H[f],l&#125;;H[f]=Cnt;&#125; void Madd(ll f,ll t,ll l)&#123;Add(f,t,l);Add(t,f,l);&#125; stack&lt;ll&gt;st;ll V[maxn],Vtop,now_edge,len1[maxn],len2[maxn]; void Tarjan(ll u,ll pre_edge)&#123; dfn[u]=low[u]=++tot;ll v; for(int i=h[u];i;i=e[i].next)&#123; v=e[i].to; if(i==(pre_edge^1))continue; if(!dfn[v])&#123; st.push(i); Tarjan(v,i); low[u]=Min(low[u],low[v]); if(low[v]&gt;dfn[u])st.pop(),Madd(u,v,e[i].len); if(low[v]==dfn[u])&#123; ll W=0;Vtop=0; N++;rf[N]=u; while(1)&#123; now_edge=st.top();st.pop(); W+=e[now_edge].len; V[++Vtop]=e[now_edge].to; len1[e[now_edge].to]=W; ring[N].push_back(e[now_edge].to); if(e[now_edge].from==u&amp;&amp;e[now_edge].to==v)break; &#125; for(int i=1;i&lt;=Vtop;i++)&#123; len2[V[i]]=W-len1[V[i]]; Madd(N,V[i],min(len1[V[i]],len2[V[i]])); &#125; &#125; &#125; else if(dfn[v]&lt;dfn[u])&#123;st.push(i);low[u]=Min(low[u],dfn[v]);&#125; &#125; &#125;&#125;using namespace cst;void Rdp(ll u)&#123; //不选环根 g[0][0]=f[ring[u][0]][0]; g[0][1]=-inf; ll v; for(int i=1;i&lt;ring[u].size();i++)&#123; v=ring[u][i]; g[i][0]=f[v][0]+Max(g[i-1][0],g[i-1][1]); g[i][1]=f[v][1]+g[i-1][0]; &#125; f[ring[u][0]][0]=Max(g[ring[u].size()-1][0],g[ring[u].size()-1][1]); //选环根 g[0][0]=-inf; g[0][1]=f[ring[u][0]][1]; for(int i=1;i&lt;ring[u].size();i++)&#123; v=ring[u][i]; g[i][0]=f[v][0]+Max(g[i-1][0],g[i-1][1]); g[i][1]=f[v][1]+g[i-1][0]; &#125; f[ring[u][0]][1]=g[ring[u].size()-1][0];&#125;void Tdp(ll u,ll fa)&#123; if(u&lt;=n)f[u][1]=1;ll v; for(int i=H[u];i;i=E[i].next)&#123; v=E[i].to;if(v==fa)continue; Tdp(v,u); if(u&lt;=n&amp;&amp;v&lt;=n)&#123; f[u][0]+=Max(f[v][0],f[v][1]); f[u][1]+=f[v][0]; &#125; &#125; if(u&gt;n)Rdp(u);&#125;int main()&#123; n=read();m=read(); for(int i=1;i&lt;=m;i++)&#123; ff=read();tt=read(); madd(ff,tt,1); &#125; N=n; Tarjan(1,0); Tdp(1,0); cout&lt;&lt;Max(f[1][0],f[1][1])&lt;&lt;endl; return 0;&#125; 后话这是这个博客的第一篇完整的题解 希望这个博客能够推动我的OI之路走的更远,更高! (撒花) 日常推荐壁纸(我自己p的):[pic shiny mountain] 完]]></content>
      <categories>
        <category>学习笔记</category>
        <category>图论</category>
        <category>仙人掌</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>图论</tag>
        <tag>DP</tag>
        <tag>圆方树</tag>
        <tag>仙人掌</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ETT(Euler Tour Tree)]]></title>
    <url>%2F2019%2F04%2F16%2FETT%2F</url>
    <content type="text"><![CDATA[emm，看起来难出天际线，实际上呢，有LF葡萄的讲解就很好懂了]]></content>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LCT填坑]]></title>
    <url>%2F2019%2F04%2F16%2FLCT%2F</url>
    <content type="text"><![CDATA[毕竟咕了两个多月了，还是写写LCT吧，顺便当这个博客第一篇正式文章 哈哈继续咕]]></content>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F04%2F14%2Fhello-world%2F</url>
    <content type="text"><![CDATA[It’s the first thing that you should learn in C++ or any other languege. First, you need a #include. 1#include&lt;iostream&gt; And than a namespace. 1using namespace std; After that, a main(). 1int main()&#123;&#125; The last thing. 1cout&lt;&lt;"Hello World!"&lt;&lt;endl; And put them together! 12345#include&lt;iostream&gt;using namespace std;int main()&#123; cout&lt;&lt;"Hello Wolrd!"&lt;&lt;endl;&#125; Congradulations!!!]]></content>
      <tags>
        <tag>C++入门</tag>
      </tags>
  </entry>
</search>
